import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import scipy.stats as stats
from statsmodels.stats.multicomp import pairwise_tukeyhsd
import scikit_posthocs as sp
import numpy as np

# Data
data = {
    "Site 1": [5, 9, 4, 5, 6, 7, 9, 5, 7, 9, 7, 9, 4, 6, 8, 2, 5, 15, 41, 34, 14, 15, 24, 9, 13, 16, 14, 20, 17],
    "Site 2": [3, 4, 9, 22, 6, 13, 23, 20, 18, 18, 13, 50, 12, 15, 10, 19, 46, 14, 34, 11, 19, 20, 19, 16, 16, 26, 20, 65, 17],
    "Site 3": [7, 2, 10, 12, 11, 11, 11, 10, 10, 2, 13, 6, 16, 8, 15, 15, 20, 14, 11, 15, 18, 18, 14, 11, 12, 7, 9, 9, 16],
}

df = pd.DataFrame(data)

# Convert data to long format for easier statistical testing
df["Repeat"] = list(range(1, 30))  # Add repeat numbers
df_long = df.melt(id_vars=["Repeat"], var_name="Site", value_name="Colony Forming Units")

# Normality check (Shapiro-Wilk test for each site)
normality_pvalues = {site: stats.shapiro(df[site])[1] for site in ["Site 1", "Site 2", "Site 3"]}

# Use ANOVA if data is normal, otherwise Kruskal-Wallis
if all(p > 0.05 for p in normality_pvalues.values()):
    stat, p_value = stats.f_oneway(df["Site 1"], df["Site 2"], df["Site 3"])
    test_type = "ANOVA"
    # Pairwise comparisons using Tukey's HSD for ANOVA
    pairwise_comparisons = pairwise_tukeyhsd(df_long["Colony Forming Units"], df_long["Site"], alpha=0.05)
else:
    stat, p_value = stats.kruskal(df["Site 1"], df["Site 2"], df["Site 3"])
    test_type = "Kruskal-Wallis"
    pairwise_comparisons = sp.posthoc_dunn(df[["Site 1", "Site 2", "Site 3"]].values.T, p_adjust="bonferroni")

# Create a figure with two subplots side by side
fig, axes = plt.subplots(1, 2, figsize=(14, 6))

# Scatter plot (Left)
sns.scatterplot(data=df_long, x="Repeat", y="Colony Forming Units", hue="Site", palette="Set1", s=100, edgecolor="black", ax=axes[0])
axes[0].axhline(y=10, color='black', linestyle='dashed', linewidth=1)  # Dashed line at 10 CFU
axes[0].set_xlabel("Repeat Number")
axes[0].set_ylabel("Colony Forming Units")
axes[0].legend(title="Site")
axes[0].grid(False)  # Remove gridlines

# Boxplot (Right)
sns.boxplot(data=df[["Site 1", "Site 2", "Site 3"]], palette="Set2", ax=axes[1])
axes[1].set_xlabel("Sites")
axes[1].set_ylabel("Colony Forming Units")
axes[1].grid(axis="y")

# Annotate only significant pairwise comparisons with connector lines
if pairwise_comparisons is not None:
    comparisons = pairwise_comparisons
    sites = ["Site 1", "Site 2", "Site 3"]
    y_pos = max(df_long["Colony Forming Units"]) * 0.8  # Adjust the starting position for p-value annotation, lower than before
    
    # Iterate through each pairwise comparison
    for i, site1 in enumerate(sites):
        for j, site2 in enumerate(sites):
            if i < j:  # Only unique pairs
                pval = comparisons.iloc[i, j]  # Get p-value for the pair
                
                # Only show if the p-value is significant
                if pval < 0.05:
                    # Coordinates for the connector lines
                    x1 = i
                    x2 = j
                    y_line = y_pos - 0.05 * (i + j)  # Adjust the vertical position of the line
                    
                    # Draw a connector line between the boxplots (shorter line)
                    axes[1].plot([x1 + 0.1, x2 - 0.1], [y_line, y_line], color='black', lw=1.5)
                    
                    # Annotate the p-value above the connector line
                    axes[1].text((x1 + x2) / 2, y_line + 0.02, f"p = {pval:.4f}", ha='center', va='bottom', fontsize=10, color='black')
                    y_pos -= 0.1  # Adjust y_pos downward for the next comparison

# Adjust layout
plt.tight_layout()

# Save as JPEG
plt.savefig("combined_plot_with_shorter_lines.jpeg", format="jpeg", dpi=300)

# Show the plot
plt.show()
